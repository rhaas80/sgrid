Tips on debugging
-----------------

1. Don't write buggy code.
--------------------------
   Be aware of what you do and take sufficiently small steps so that 
   it is always easy to find small mistakes.

   Run the test suites before commits

   Use floatdiff (see in sgrid/utilities) to check diffs before and after 
   a code modification


2. If you do have a bug:
------------------------

Compile sgrid with debug flag turned on. In MyConfig, set

# optimization flags, say -O, -O2, -g for debugging, -pg for profiling, ...
OFLAGS = -g

Then "make clean" and "make". Should also work for parts of the code.

--------

A simple debugger is gdb. 

> gdb

(gdb) help
(gdb) help running

(gdb) file sgrid
(gdb) set args myparfile
(gdb) run

... bad things happen, assume that code dies ...

(gdb) backtrace          ... to see calling stack

... in order to print variables (e.g. vdb[1].name) ...
(gdb) print vdb[ivar[0]].name

Sometimes we get an error e.g. in free, but we do not want to debug libc's
free. Then we need to go up a few frames, e.g:
(gdb) f 1

If we have threads (e.g. from OpenMP) we may need to switch threads, e.g:
(gdb) thread 5

In general we may need some info:
(gdb) info threads
(gdb) info locals
(gdb) info variables
(gdb) info symbol 0x7ffff66dae40

Sometimes we are left with a core file. This can be loaded with:
================================================================
gdb /home1/00304/tg455767/sgrid/exe/sgrid core.46702
(gdb) bt
Note: On most systems core files seem to be off bt default, but e.g. on
      stampede I could activate them by typing:
ulimit -c 6000000

--------

I can start gdb also like this:
===============================
gdb --args ./sgrid l.par
(gdb) r           ... run code
(gdb) bt          ... to see calling stack
(gdb) q           ... quit
(gdb) help info   ... help on info
(gdb) thread 5    ... switch to thread 5
(gdb) frame 2     ... switch to frame 2

--------

Bracket the problem in time by checking out for different dates:
cvs co -D 7/21/2003 sgrid

--------


Wolfgang's tips for finding seg faults:
---------------------------------------

If you need to debug segfaults with electric fence do this:
-----------------------------------------------------------

1. compile code with libefence liked in, e.g. add -lefence to SPECIALLIBS
2. run code in gdb
3. Quit the debugger..
4. Set EF_PROTECT_BELOW = 1 in the shell environment..
5. Repeat step 2, this time repairing underruns if they occur..
6. Quit the debugger.

OR:
1. execute the following (which loads the shared lib version of libefence):
 LD_PRELOAD=libefence.so.0.0  ./sgrid test.par
2. examine the core file from the crash with gdb:
 gdb sgrid core.9073

NOTE: if the program exits with:
"ElectricFence Exiting: mprotect() failed: Segmentation fault"
ElectricFence probably ran out of memory map areas!!!
You can increase them with e.g.
 cat /proc/sys/vm/max_map_count
 echo 128000 > /proc/sys/vm/max_map_count 
If the program works afterwards, only ElectricFence ran out of memory map
areas.

duma is an alternative to electric fence:
------------------------------------------
INSTRUCTIONS FOR DEBUGGING YOUR PROGRAM
1. Link with libduma.a i.e. with -lduma or 
   SPECIALLIBS += -lduma
2. Run  your program in a debugger and fix any overruns or accesses
   to free memory.
3. Quit the debugger.
4. Set DUMA_PROTECT_BELOW = 1 in the shell environment.
5. Repeat step 2, this time repairing underruns if they occur.
6. Quit the debugger.
7. Read the restrictions in the section on WORD-ALIGNMENT AND
   OVER‐RUN  DETECTION. See  if  you  can  set DUMA_ALIGNMENT to 0
   and repeat step 2. Sometimes this will be too much  work,  or
   there will  be problems with library routines for which you don't
   have the source, that will prevent you from doing this.

Finding memory leaks with valgrind:
-----------------------------------
1. compile code without OpenMP and with OFLAGS = -g
2. run code with valgrid's memcheck
 valgrind --tool=memcheck --leak-check=yes ./sgrid t2.par >& t2.out
